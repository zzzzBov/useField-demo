{"version":3,"sources":["components/LogInForm.tsx","index.tsx","App.tsx"],"names":["LogInForm","onSubmit","username","useField","required","password","internalSubmit","useCallback","e","preventDefault","touch","valid","value","method","className","htmlFor","error","id","name","type","aria-describedby","onChange","set","target","onBlur","ReactDOM","render","alert","document","querySelector"],"mappings":"gMAWaA,EAAiC,SAAC,GAKxC,IADLC,EACI,EADJA,SAKMC,EAAWC,YAAS,CACxBC,cACC,IAKGC,EAAWF,YAAS,CACxBC,cACC,IAGGE,EAAiBC,uBAAY,SAACC,GAClCA,EAAEC,iBAGFP,EAASQ,QACTL,EAASK,QAKLR,EAASS,OAASN,EAASM,OAG7BV,EAASC,EAASU,MAAOP,EAASO,SAEnC,CAACX,EAAUC,EAAUG,IAExB,OACE,0BACEQ,OAAO,OAIPZ,SAAUK,GACV,sCACA,yBAAKQ,UAAU,SACb,2BAAOC,QAAQ,YAAf,aAoBCb,EAASc,OACR,uBAAGC,GAAG,kBAAN,wBAEF,2BAGEH,UAAWZ,EAASc,MAAQ,QAAU,GACtCC,GAAG,WACHC,KAAK,IACLC,KAAK,OACLC,mBAAiB,iBAGjBR,MAAOV,EAASU,MAUhBS,SAAU,SAAAb,GAAC,OAAIN,EAASoB,IAAId,EAAEe,OAAOX,QAIrCY,OAAQtB,EAASQ,SAGrB,yBAAKI,UAAU,SACb,2BAAOC,QAAQ,YAAf,aACCV,EAASW,OACR,uBAAGC,GAAG,kBAAN,wBAEF,2BACEH,UAAWT,EAASW,MAAQ,QAAU,GACtCC,GAAG,WACHC,KAAK,IACLC,KAAK,WACLC,mBAAiB,iBACjBR,MAAOP,EAASO,MAChBS,SAAU,SAAAb,GAAC,OAAIH,EAASiB,IAAId,EAAEe,OAAOX,QACrCY,OAAQnB,EAASK,SAarB,4BAAQS,KAAK,UAAb,YCjINM,IAASC,OAAO,mBCFa,WAC3B,IAAMzB,EAAWM,uBAAY,SAACL,EAAkBG,GAC9CsB,MAAM,kBAAD,OAAmBzB,EAAnB,YAA+BG,MACnC,IAEH,OACE,kBAAC,EAAD,CAAWJ,SAAUA,MDJT,MAAS2B,SAASC,cAAc,W","file":"static/js/main.4bdaefdf.chunk.js","sourcesContent":["import React, { FC, useCallback } from 'react'\r\n\r\n// Import the useField hook along with any needed validators\r\nimport { useField, required } from '@zzzzbov/usefield'\r\n\r\ninterface ILogInFormProps {\r\n  onSubmit(username: string, password: string): void\r\n}\r\n\r\n// `useField` can be used within any react control.\r\n// This one is an example login form.\r\nexport const LogInForm: FC<ILogInFormProps> = ({\r\n  // The onSubmit property here is used as an example to externalize the\r\n  // submitted form data. This is done to keep the example brief but is not\r\n  // strictly necessary.\r\n  onSubmit\r\n}) => {\r\n  // Call the `useField` hook passing in as few or as many validators as\r\n  // desired, along with an initial field value. In this case a single required\r\n  // field validator is used.\r\n  const username = useField({\r\n    required\r\n  }, '')\r\n\r\n  // `useField` can be called as many times as needed for as many fields as\r\n  // needed. While this makes managing data very straightforward, it may be too\r\n  // verbose for complex forms that have more than a handful of fields.\r\n  const password = useField({\r\n    required\r\n  }, '')\r\n\r\n  // Set up a callback for the form submission\r\n  const internalSubmit = useCallback((e) => {\r\n    e.preventDefault()\r\n\r\n    // Mark the fields as dirty since the fields might not have been edited yet\r\n    username.touch()\r\n    password.touch()\r\n\r\n    // Check that the fields are valid.\r\n    // Use the `valid` properties and NOT the `error` helpers as the error\r\n    // helpers will return false if the fields are clean.\r\n    if (username.valid && password.valid) {\r\n      // Handle the form submission behavior.\r\n      // This example uses an onSubmit property to keep things simple.\r\n      onSubmit(username.value, password.value)\r\n    }\r\n  }, [onSubmit, username, password])\r\n\r\n  return (\r\n    <form\r\n      method='POST'\r\n\r\n      // Bind the submit callback on the form to take advantage of native form\r\n      // submission behaviors, such as implicit form submission.\r\n      onSubmit={internalSubmit}>\r\n      <h1>Log In</h1>\r\n      <div className='Field'>\r\n        <label htmlFor='username'>Username:</label>\r\n        {/*\r\n          Display an error message to the user.\r\n          \r\n          If multiple validators are used, it may be desirable to check each\r\n          validator explicitly, such as:\r\n\r\n          { username.dirty && !username.validation.required && (\r\n            <p>Username is required</p>\r\n          ) }\r\n\r\n          Alternatively, validator-specific messages may be left visible so\r\n          that their current state is visibly toggled as the user changes the\r\n          field value:\r\n\r\n          <p>\r\n            { username.validation.required ? '☑ ' : '☐ ' }\r\n            Username is required\r\n          </p>\r\n         */}\r\n        {username.error && (\r\n          <p id='username-error'>Username is required</p>\r\n        )}\r\n        <input\r\n          // The `error` property can be used to visually indicate an issue to \r\n          // the user such as by toggling a class.\r\n          className={username.error ? 'error' : ''}\r\n          id='username'\r\n          name='u'\r\n          type='text'\r\n          aria-describedby='username-error'\r\n\r\n          // Pass the current value to the field\r\n          value={username.value}\r\n\r\n          // Bind the `set()` method to the field.\r\n          // Some extra boilerplate is used to access the current field value.\r\n          // If the field should be marked as dirty, call touch as well:\r\n          //\r\n          // onChange={e => {\r\n          //   username.set(e.target.value)\r\n          //   username.touch()\r\n          // }}\r\n          onChange={e => username.set(e.target.value)}\r\n\r\n          // `touch()` is bound to the blur handler so that the field is flagged\r\n          // as dirty only after the user has finished editing the field.\r\n          onBlur={username.touch}\r\n        />\r\n      </div>\r\n      <div className='Field'>\r\n        <label htmlFor='password'>Password:</label>\r\n        {password.error && (\r\n          <p id='password-error'>Password is required</p>\r\n        )}\r\n        <input\r\n          className={password.error ? 'error' : ''}\r\n          id='password'\r\n          name='p'\r\n          type='password'\r\n          aria-describedby='password-error'\r\n          value={password.value}\r\n          onChange={e => password.set(e.target.value)}\r\n          onBlur={password.touch}\r\n        />\r\n      </div>\r\n      {/*\r\n        A single submit button is used here to submit the form.\r\n        If a reset button is also desirable, it may be added, and an `onReset`\r\n        handler should be added to the <form> to reset the fields:\r\n\r\n        onReset={() => {\r\n          username.reset()\r\n          password.reset()\r\n        }}\r\n      */}\r\n      <button type='submit'>\r\n        Log In\r\n      </button>\r\n    </form>\r\n  )\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/styles.scss';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.querySelector('.Root'));\n","import React, { useCallback } from 'react';\nimport { LogInForm } from './components'\n\nexport const App: React.FC = () => {\n  const onSubmit = useCallback((username: string, password: string) => {\n    alert(`Logged in with ${username}/${password}`)\n  }, [])\n\n  return (\n    <LogInForm onSubmit={onSubmit} />\n  );\n}\n"],"sourceRoot":""}